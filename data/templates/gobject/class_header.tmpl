$header_comment$

#ifndef $CLASSNAME$_H
#define $CLASSNAME$_H

#include "glib-object.h"

G_BEGIN_DECLS

#! if class.usesVarArgsMethods
#include <stdarg.h>
#! end

#! if hasSuperClass
#include "$filename(class.superClass)$.h"
#! end
#! for intf in class.intfImpls
#include "$filename(intf)$.h"
#! end

#! for depHeader in depHeaders
#include "$depHeader$"
#! end

$user_code(header_top)$

/* ===== Instance ===== */

#! if hasPrivAttrs
typedef struct _$Classname$Private $Classname$Private;
#! end
#! if hasProtAttrs
typedef struct _$Classname$Protected $Classname$Protected;
#! end

typedef struct _$Classname$ {

#! if not hasSuperClass
	GObject super;
#! else
	$Super$ super; 
#! end
#! for attr in class.attrs
	#! if equal attr.scope INSTANCE 
		#! if equal attr.visi PUBLIC
	$attr.type_$ $attr.name$;
		#! end
	#! end	
#! end
#! user_code properties
	/* add properties here... */
#! end
#! if hasPrivAttrs
	$Classname$Private* priv;
#! end
#! if hasProtAttrs
  $Classname$Protected* prot;
#! end
} $Classname$;

/* ===== Properties =====

#! for prop in class.props
    #! if equal prop.access '0'
    "$prop.name$" : $prop.descr$ (read)
    #! elif equal prop.access '1'
    "$prop.name$" : $prop.descr$ (read/initial write)
    #! elif equal prop.access '2'
    "$prop.name$" : $prop.descr$ (read/write)
    #! end
#! end

*/

/* ===== Class ===== */

typedef struct _$Classname$Class {

#! if not hasSuperClass
	GObjectClass super_class;
#! else
	$Super$Class super_class; 
#! end
	
#! for attr in class.attrs where equal attr.scope STATIC 
	#! if first
	/* attributes: */	
	#! end
	$attr.type_$ $attr.name$;
#! end
	
#! for meth in class.methods where meth.virtual and not meth.isSignal 
	#! if first
	/* virtual methods: */	
	#! end
	$meth.resultType$ (*$meth.name$)($signature(meth, True, True, False)$);
#! end
#! if hasSignals
	/* signals: */
	#! for meth in class.methods where meth.isSignal
	$meth.resultType$ (*$meth.name$)($signature(meth, True, True, False)$);
	#! end
#! end

} $Classname$Class;

GType $prefix$_get_type();

#! if not class.abstract

/* Constructor: */
	
$Classname$*
	#! if hasConstructorArgs
$prefix$_new(
	$signature(class.constructor)$);
	#! else
$prefix$_new();
	#! end
	
#! end

#! if hasConstructorArgs
void
$prefix$_init(
	$Classname$* self,
	$signature(class.constructor)$);
#! else
void
$prefix$_init($Classname$* self); 
#! end

/* To be called by derived classes: */
void
$prefix$_dispose(GObject* in_object); 

void
$prefix$_finalize(GObject* in_object);

#! for meth in class.methods
	#! if first
/* public methods: */
	#! end
	#! if equal meth.visi PUBLIC and not isConstructor class meth
		#! if not meth.isSignal
		
$meth.resultType$ 
$prefix$_$meth.name$($signature(meth)$);

      #! if meth.virtual and not meth.abstract
/* implementation of method "$meth.name$" */
$meth.resultType$ 
$prefix$_$meth.name$_im($signature(meth)$);
      #! end

		#! end
	#! end 
#! end

#! for meth in redefinedMethods where equal meth.visi PUBLIC

/* implementation of method $meth.name$ */ 
$meth.resultType$ 
$prefix$_$meth.name$_im($signature(meth)$);

#! end

/* ===== Macros ===== */
#! if withNamespace

#define $NAMESPACE$_TYPE_$BASENAME$ \
	($prefix$_get_type())
#define $NAMESPACE$_$BASENAME$(obj) \
	(G_TYPE_CHECK_INSTANCE_CAST((obj), $NAMESPACE$_TYPE_$BASENAME$, $Classname$))
#define $NAMESPACE$_$BASENAME$_CLASS(cls) \
	(G_TYPE_CHECK_CLASS_CAST((cls), $NAMESPACE$_TYPE_$BASENAME$, $Classname$Class))
#define $NAMESPACE$_IS_$BASENAME$(obj) \
	(G_TYPE_CHECK_INSTANCE_TYPE((obj), $NAMESPACE$_TYPE_$BASENAME$))
#define $NAMESPACE$_IS_$BASENAME$_CLASS(cls) \
	(G_TYPE_CHECK_CLASS_TYPE((cls), $NAMESPACE$_TYPE_$BASENAME$))
#define $NAMESPACE$_$BASENAME$_GET_CLASS(obj) \
	(G_TYPE_INSTANCE_GET_CLASS((obj), $NAMESPACE$_TYPE_$BASENAME$, $Classname$Class))
#! else

#define TYPE_$BASENAME$ \
	($prefix$_get_type())
#define $BASENAME$(obj) \
	(G_TYPE_CHECK_INSTANCE_CAST((obj), TYPE_$BASENAME$, $Classname$))
#define $BASENAME$_CLASS(cls) \
	(G_TYPE_CHECK_CLASS_CAST((cls), TYPE_$BASENAME$, $Classname$Class))
#define IS_$BASENAME$(obj) \
	(G_TYPE_CHECK_INSTANCE_TYPE((obj), TYPE_$BASENAME$))
#define IS_$BASENAME$_CLASS(cls) \
	(G_TYPE_CHECK_CLASS_TYPE((cls), TYPE_$BASENAME$))
#define $BASENAME$_GET_CLASS(obj) \
	(G_TYPE_INSTANCE_GET_CLASS((obj), TYPE_$BASENAME$, $Classname$Class))
#! end

$user_code(header_bottom)$

G_END_DECLS

#endif
